package gameBasics;
import java.util.*;

public class GameBasics {

   public static void main(String[] args) {

      Deck deck;
      Hand[] hands;
      int userInput;
      
      System.out.println("------------------RUN 1----------------");
      System.out.println();
      
      deck = new Deck(2);
      display(deck);
      deck = new Deck(2);
      deck.shuffle();
      display(deck);
      
      
      deck = new Deck();
      display(deck);
      deck = new Deck();
      deck.shuffle();
      display(deck);
      
      System.out.println("------------------RUN 2----------------");
      System.out.println();
      
      userInput = getNumHands();
      deck = new Deck();
      hands = setNumHands(userInput);
      dealToHands(deck, hands, userInput);
      display(userInput, hands);
     
      System.out.println("Shuffle deck and re-deal cards:");
      deck = new Deck();
      deck.shuffle();
      resetHands(hands);
      dealToHands(deck, hands, userInput);
      display(userInput, hands);
   }
   
   public static int getNumHands(){
      int input = 0;
      Scanner keyboard = new Scanner(System.in);
      boolean test = false;
      
      while(!test){
         System.out.println("How many hands would you like to play? You can choose"
               + " between 1 - 10:");
         input = keyboard.nextInt();
         if(input < 1 || input > 10){
            System.out.println("I'm sorry, that is not a valid amount. Please try again.");
         }
         else{
            test = true;
            keyboard.close();
         }   
      }
      return input;
   }
   
   public static Hand[] setNumHands(int input){
      Hand[] hands = new Hand[input];
      
      for(int i = 0; i < input; i++){
         hands[i] = new Hand();
      }
      return hands;
   }
   
   public static void dealToHands(Deck deck, Hand[] hand, int input){
      while(deck.getTopCard() > 0){
         for(int k = 0; k < input; k++){
            if(deck.getTopCard() > 0){
               hand[k].takeCard(deck.dealCard());
            }
         }
      }
   }
   
   public static void resetHands(Hand[] hands){
      for(int i = 0; i < hands.length; i++){
         hands[i].resetHand();
      }
   }
   
   public static void display (Deck deck){
      for(int i = 0; i < deck.getTopCard(); i++){
         System.out.print(deck.dealCard().toString());
         if(i != deck.getTopCard() - 1){
            System.out.print(", ");            
         }
      }
      System.out.println();
      System.out.println();
   }
   
   public static void display(int input, Hand[] hand){
      for (int i = 0; i < input; i++){
         System.out.println("Hand: " + hand[i].toString());
         System.out.println();
      }
   }
   

}


public class Card {
   
   public enum Suit {HEARTS, SPADES, CLUBS, DIAMONDS};
   private Suit suit;
   private char value;
   private boolean errorFlag;
  
   public Card(){
      this('A', Suit.SPADES);
   }
   
   public Card(char value, Suit suit){
     setCard(value, suit);
   }
   
   public Card(Card card){
      this(card.getValue(), card.getSuit());
   }
   
   public Card(boolean errorCheck){
      this('A', Suit.SPADES);
      errorFlag = errorCheck;
   }
     
   public boolean setCard(char value, Suit suit)
   {
      this.suit = suit;
      char upValue = Character.toUpperCase(value);
      
      if(isValid(upValue, suit)){
         this.value = upValue;
         errorFlag = false;
      }
      else{
         this.value = 'A';
         errorFlag = true;
      }
      return errorFlag;
   }
   
   public boolean isValid(char value, Suit suit){
      if (value == 'A' || value == 'K' || value == 'Q' || value == 'J'
            || value == 'T' || (value >= '2' && value <= '9'))
         return true;
      else
      {
         return false;
      }
   }
   
   public String toString()
   {
      String returnValue;
      if (errorFlag){
         returnValue = "Invalid Card"; 
      }
      else{
         returnValue = String.valueOf(value) + " of " + suit;
      }
      return returnValue;
   }
   
   public char getValue(){
      return value;
   }
   
   public Suit getSuit(){
      return suit;
   }
   
   public boolean checkError(){
      return errorFlag;
   }
   
   public boolean equals(Card card){
      boolean identical = false;
      
      if(this.value == card.value &&
      this.suit == card.suit){
         identical = true;
      }
      return identical;
   }
}


public class Hand {

   public final int MAX_CARDS = 50;
   private Card[] myCards = new Card[MAX_CARDS];
   private int numCards;
   
   public Hand(){
      resetHand();
   }
   
   public void resetHand(){
      myCards = new Card[MAX_CARDS];
   }
 
   public boolean takeCard(Card card){
      if(numCards >= MAX_CARDS){
         return false;
      }
      myCards[numCards] = card;
      numCards++;
      return true;
   }
   
   public Card playCard(){
      numCards--;
      return myCards[numCards];
   }
   
   public String toString(){
      StringBuilder array = new StringBuilder();
      for(int i = 0; i < numCards; i++){
         array.append(myCards[i]);
         if(i != numCards-1){
         array.append(", ");
         }
      }
      return array.toString();
   }
   
   public int getNumCards(){
      return numCards;
   }
   
   public Card inspectCard(int k){
      if (k >= numCards){
         boolean error = true;
         Card card = new Card(error);
         return card;
      }
      return myCards[k];
   }
}


import gameBasics.Card.Suit;
public class Deck {
   public final int MAX_CARDS = 312;
   private static Card[] masterPack;
   private Card[] cards;
   private int topCard;
   private int numPacks;

   Deck(){ 
      this(1);
   }
   
   Deck(int numPacks){
      this.numPacks = numPacks;
      topCard = numPacks * 52;
      
      if(masterPack == null){
         masterPack = new Card[52];
         allocateMasterPack(); 
      }
      init(topCard);
   }
   
   private static void allocateMasterPack(){
      char value;
      Suit suit;
      
      for(int i = 0; i <= masterPack.length - 1; i++){
         masterPack[i] = new Card();
      }  
      
      for(int j = 0; j < 4; j++){
         switch(j){
         case 0:
            suit = Card.Suit.CLUBS;
            break;
         case 1:
            suit = Card.Suit.DIAMONDS;
            break;
         case 2:
            suit = Card.Suit.HEARTS;
            break;
         case 3:
            suit = Card.Suit.SPADES;
            break;
         default:
            suit = Card.Suit.SPADES;
           break;
         }
         
         masterPack[13*j].setCard('A', suit);
         int k = 1;
         for(value = '2'; value >= '2' && value <= '9'; value++){
            masterPack[13*j + k].setCard(value, suit);
            k++;
         }
         masterPack[13*j+9].setCard('T', suit);
         masterPack[13*j+10].setCard('J', suit);
         masterPack[13*j+11].setCard('Q', suit);
         masterPack[13*j+12].setCard('K', suit);
      }
   }
   
   public void init(int numPacks){
      cards = new Card[numPacks];

      int j = 0;
      for(int i = 0; i < numPacks; i++){
         if (j >= masterPack.length){
            j = 0;
         }
         cards[i] = new Card(masterPack[j]);
         j++;
      }
   }
   
   public void shuffle(){
      for(int i = 0; i < topCard; i++){
         int random = (int)(Math.random() * topCard);
         Card temp = cards[random];
         cards[random] = cards[i];
         cards[i] = temp;
      }
   }
   
   public Card dealCard(){
      topCard--;
      return cards[topCard];
   }
   
   public int getTopCard(){
      return topCard;
   }
   
   public Card inspectCard(int k){
      if (k >= topCard){
         boolean error = true;
         Card card = new Card(error);
         return card;
      }
      return cards[k];
   }
   
}


------------------------------------OUTPUT 1------------------------------------------

------------------RUN 1----------------

K of SPADES, Q of SPADES, J of SPADES, T of SPADES, 9 of SPADES, 8 of SPADES, 7 
of SPADES, 6 of SPADES, 5 of SPADES, 4 of SPADES, 3 of SPADES, 2 of SPADES, A of
 SPADES, K of HEARTS, Q of HEARTS, J of HEARTS, T of HEARTS, 9 of HEARTS, 8 of H
EARTS, 7 of HEARTS, 6 of HEARTS, 5 of HEARTS, 4 of HEARTS, 3 of HEARTS, 2 of HEA
RTS, A of HEARTS, K of DIAMONDS, Q of DIAMONDS, J of DIAMONDS, T of DIAMONDS, 9 
of DIAMONDS, 8 of DIAMONDS, 7 of DIAMONDS, 6 of DIAMONDS, 5 of DIAMONDS, 4 of DI
AMONDS, 3 of DIAMONDS, 2 of DIAMONDS, A of DIAMONDS, K of CLUBS, Q of CLUBS, J o
f CLUBS, T of CLUBS, 9 of CLUBS, 8 of CLUBS, 7 of CLUBS, 6 of CLUBS, 5 of CLUBS,
 4 of CLUBS, 3 of CLUBS, 2 of CLUBS, A of CLUBS

4 of DIAMONDS, A of SPADES, 5 of CLUBS, K of CLUBS, 3 of HEARTS, T of CLUBS, 3 o
f CLUBS, J of CLUBS, 8 of SPADES, 4 of HEARTS, 2 of DIAMONDS, A of CLUBS, 5 of H
EARTS, 7 of HEARTS, 5 of HEARTS, 6 of CLUBS, 4 of DIAMONDS, K of CLUBS, J of SPA
DES, T of HEARTS, 5 of DIAMONDS, 7 of DIAMONDS, A of DIAMONDS, Q of HEARTS, 7 of
 CLUBS, Q of DIAMONDS, 9 of DIAMONDS, 2 of CLUBS, 5 of DIAMONDS, Q of CLUBS, 8 o
f CLUBS, Q of CLUBS, 9 of HEARTS, 6 of CLUBS, A of HEARTS, Q of SPADES, T of DIA
MONDS, 7 of SPADES, Q of DIAMONDS, J of DIAMONDS, K of DIAMONDS, 6 of HEARTS, A 
of HEARTS, 7 of HEARTS, 2 of SPADES, 2 of HEARTS, 8 of HEARTS, 3 of CLUBS, Q of 
HEARTS, J of CLUBS, 2 of SPADES, A of SPADES

K of SPADES, Q of SPADES, J of SPADES, T of SPADES, 9 of SPADES, 8 of SPADES, 7 
of SPADES, 6 of SPADES, 5 of SPADES, 4 of SPADES, 3 of SPADES, 2 of SPADES, A of
 SPADES, K of HEARTS, Q of HEARTS, J of HEARTS, T of HEARTS, 9 of HEARTS, 8 of H
EARTS, 7 of HEARTS, 6 of HEARTS, 5 of HEARTS, 4 of HEARTS, 3 of HEARTS, 2 of HEA
RTS, A of HEARTS

4 of HEARTS, K of CLUBS, Q of CLUBS, J of SPADES, T of HEARTS, 9 of CLUBS, 5 of 
CLUBS, 5 of HEARTS, J of HEARTS, 4 of CLUBS, Q of DIAMONDS, 4 of DIAMONDS, T of 
CLUBS, 2 of SPADES, 8 of DIAMONDS, 7 of DIAMONDS, A of HEARTS, K of SPADES, 9 of
 HEARTS, Q of HEARTS, T of SPADES, 8 of SPADES, K of HEARTS, 9 of SPADES, 3 of S
PADES, 3 of HEARTS

------------------RUN 2----------------

How many hands would you like to play? You can choose between 1 - 10:
2
Hand: K of SPADES, J of SPADES, 9 of SPADES, 7 of SPADES, 5 of SPADES, 3 of SPAD
ES, A of SPADES, Q of HEARTS, T of HEARTS, 8 of HEARTS, 6 of HEARTS, 4 of HEARTS
, 2 of HEARTS, K of DIAMONDS, J of DIAMONDS, 9 of DIAMONDS, 7 of DIAMONDS, 5 of 
DIAMONDS, 3 of DIAMONDS, A of DIAMONDS, Q of CLUBS, T of CLUBS, 8 of CLUBS, 6 of
 CLUBS, 4 of CLUBS, 2 of CLUBS

Hand: Q of SPADES, T of SPADES, 8 of SPADES, 6 of SPADES, 4 of SPADES, 2 of SPAD
ES, K of HEARTS, J of HEARTS, 9 of HEARTS, 7 of HEARTS, 5 of HEARTS, 3 of HEARTS
, A of HEARTS, Q of DIAMONDS, T of DIAMONDS, 8 of DIAMONDS, 6 of DIAMONDS, 4 of 
DIAMONDS, 2 of DIAMONDS, K of CLUBS, J of CLUBS, 9 of CLUBS, 7 of CLUBS, 5 of CL
UBS, 3 of CLUBS, A of CLUBS

Shuffle deck and re-deal cards:
Hand: null, null, null, null, null, null, null, null, null, null, null, null, nu
ll, null, null, null, null, null, null, null, null, null, null, null, null, null
, 6 of HEARTS, 2 of DIAMONDS, 7 of SPADES, 9 of SPADES, 3 of CLUBS, K of CLUBS, 
A of SPADES, 9 of HEARTS, 5 of SPADES, 8 of CLUBS, K of DIAMONDS, J of DIAMONDS,
 3 of SPADES, T of CLUBS, K of SPADES, Q of DIAMONDS, J of HEARTS, A of HEARTS, 
9 of CLUBS, Q of SPADES, 2 of HEARTS, 4 of HEARTS, 4 of DIAMONDS, J of SPADES

Hand: null, null, null, null, null, null, null, null, null, null, null, null, nu
ll, null, null, null, null, null, null, null, null, null, null, null, null, null
, J of CLUBS, 9 of DIAMONDS, 5 of CLUBS, 5 of DIAMONDS, 8 of HEARTS, A of CLUBS,
 4 of CLUBS, 6 of CLUBS, 7 of CLUBS, 8 of DIAMONDS, 5 of HEARTS, T of DIAMONDS, 
8 of SPADES, 3 of HEARTS, 3 of DIAMONDS, 7 of DIAMONDS, Q of HEARTS, K of HEARTS
, 4 of SPADES, T of SPADES, 2 of SPADES, 6 of DIAMONDS, Q of CLUBS, T of HEARTS

------------------------------------OUTPUT 2-----------------------------------------
/* In GameBasics class, if I modify run 2 to:
 *    System.out.println("------------------RUN 2----------------");
 *    System.out.println();
 *    
 *    userInput = getNumHands();
 *    deck = new Deck();
 *     hands = setNumHands(userInput);
 *    dealToHands(deck, hands, userInput);
 *    display(userInput, hands);
 *    
 *    System.out.println("Shuffle deck and re-deal cards:");
 *    deck = new Deck();
 *    deck.shuffle();
 *    hands = setNumHands(userInput); //instead of resetHands(hands);
 *    dealToHands(deck, hands, userInput);
 *    display(userInput, hands);
 *    I receive the following output without the null objects printing in my Hands.
 */

------------------RUN 1----------------

K of SPADES, Q of SPADES, J of SPADES, T of SPADES, 9 of SPADES, 8 of SPADES, 7 
of SPADES, 6 of SPADES, 5 of SPADES, 4 of SPADES, 3 of SPADES, 2 of SPADES, A of
 SPADES, K of HEARTS, Q of HEARTS, J of HEARTS, T of HEARTS, 9 of HEARTS, 8 of H
EARTS, 7 of HEARTS, 6 of HEARTS, 5 of HEARTS, 4 of HEARTS, 3 of HEARTS, 2 of HEA
RTS, A of HEARTS, K of DIAMONDS, Q of DIAMONDS, J of DIAMONDS, T of DIAMONDS, 9 
of DIAMONDS, 8 of DIAMONDS, 7 of DIAMONDS, 6 of DIAMONDS, 5 of DIAMONDS, 4 of DI
AMONDS, 3 of DIAMONDS, 2 of DIAMONDS, A of DIAMONDS, K of CLUBS, Q of CLUBS, J o
f CLUBS, T of CLUBS, 9 of CLUBS, 8 of CLUBS, 7 of CLUBS, 6 of CLUBS, 5 of CLUBS,
 4 of CLUBS, 3 of CLUBS, 2 of CLUBS, A of CLUBS

Q of SPADES, J of CLUBS, K of SPADES, 9 of SPADES, T of SPADES, 3 of DIAMONDS, A
 of HEARTS, 5 of SPADES, 2 of HEARTS, J of DIAMONDS, 9 of HEARTS, 2 of SPADES, 3
 of CLUBS, A of CLUBS, 2 of DIAMONDS, T of CLUBS, 8 of SPADES, 2 of CLUBS, A of 
DIAMONDS, Q of HEARTS, 8 of CLUBS, Q of SPADES, 2 of DIAMONDS, 5 of SPADES, K of
 CLUBS, 5 of DIAMONDS, 2 of SPADES, Q of CLUBS, 6 of HEARTS, 9 of CLUBS, 5 of HE
ARTS, T of CLUBS, J of CLUBS, Q of HEARTS, K of SPADES, 4 of HEARTS, 9 of CLUBS,
 3 of SPADES, 9 of SPADES, 4 of DIAMONDS, J of SPADES, K of HEARTS, A of SPADES,
 8 of CLUBS, J of SPADES, 3 of SPADES, 7 of DIAMONDS, 2 of HEARTS, 4 of DIAMONDS
, J of HEARTS, T of SPADES, 7 of SPADES

K of SPADES, Q of SPADES, J of SPADES, T of SPADES, 9 of SPADES, 8 of SPADES, 7 
of SPADES, 6 of SPADES, 5 of SPADES, 4 of SPADES, 3 of SPADES, 2 of SPADES, A of
 SPADES, K of HEARTS, Q of HEARTS, J of HEARTS, T of HEARTS, 9 of HEARTS, 8 of H
EARTS, 7 of HEARTS, 6 of HEARTS, 5 of HEARTS, 4 of HEARTS, 3 of HEARTS, 2 of HEA
RTS, A of HEARTS

5 of DIAMONDS, 8 of DIAMONDS, J of CLUBS, J of HEARTS, 8 of SPADES, 2 of SPADES,
 2 of DIAMONDS, K of CLUBS, J of SPADES, 9 of SPADES, Q of DIAMONDS, Q of CLUBS,
 8 of HEARTS, 5 of SPADES, 9 of CLUBS, 3 of SPADES, 4 of DIAMONDS, 8 of CLUBS, A
 of DIAMONDS, 3 of CLUBS, K of HEARTS, 4 of SPADES, K of DIAMONDS, 5 of HEARTS, 
T of CLUBS, 3 of HEARTS

------------------RUN 2----------------

How many hands would you like to play? You can choose between 1 - 10:
2
Hand: K of SPADES, J of SPADES, 9 of SPADES, 7 of SPADES, 5 of SPADES, 3 of SPAD
ES, A of SPADES, Q of HEARTS, T of HEARTS, 8 of HEARTS, 6 of HEARTS, 4 of HEARTS
, 2 of HEARTS, K of DIAMONDS, J of DIAMONDS, 9 of DIAMONDS, 7 of DIAMONDS, 5 of 
DIAMONDS, 3 of DIAMONDS, A of DIAMONDS, Q of CLUBS, T of CLUBS, 8 of CLUBS, 6 of
 CLUBS, 4 of CLUBS, 2 of CLUBS

Hand: Q of SPADES, T of SPADES, 8 of SPADES, 6 of SPADES, 4 of SPADES, 2 of SPAD
ES, K of HEARTS, J of HEARTS, 9 of HEARTS, 7 of HEARTS, 5 of HEARTS, 3 of HEARTS
, A of HEARTS, Q of DIAMONDS, T of DIAMONDS, 8 of DIAMONDS, 6 of DIAMONDS, 4 of 
DIAMONDS, 2 of DIAMONDS, K of CLUBS, J of CLUBS, 9 of CLUBS, 7 of CLUBS, 5 of CL
UBS, 3 of CLUBS, A of CLUBS

Shuffle deck and re-deal cards:
Hand: K of DIAMONDS, 2 of HEARTS, 4 of HEARTS, 9 of HEARTS, 4 of SPADES, 4 of CL
UBS, 5 of CLUBS, Q of CLUBS, A of CLUBS, K of SPADES, 7 of HEARTS, 3 of CLUBS, A
 of HEARTS, 6 of HEARTS, 3 of HEARTS, T of CLUBS, 2 of SPADES, 2 of CLUBS, Q of 
DIAMONDS, 2 of DIAMONDS, 3 of DIAMONDS, 6 of CLUBS, 5 of DIAMONDS, 9 of SPADES, 
5 of HEARTS, 8 of CLUBS

Hand: 5 of SPADES, J of CLUBS, J of DIAMONDS, 7 of SPADES, A of DIAMONDS, 8 of D
IAMONDS, 9 of CLUBS, J of HEARTS, 6 of DIAMONDS, Q of HEARTS, Q of SPADES, T of 
HEARTS, K of HEARTS, J of SPADES, 9 of DIAMONDS, 6 of SPADES, K of CLUBS, T of D
IAMONDS, 3 of SPADES, 7 of CLUBS, 8 of SPADES, A of SPADES, 8 of HEARTS, 4 of DI
AMONDS, T of SPADES, 7 of DIAMONDS

